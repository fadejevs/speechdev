"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.useMicVAD = exports.defaultReactRealTimeVADOptions = void 0;
const vad_web_1 = require("@ricky0123/vad-web");
const react_1 = require("react");
const defaultReactOptions = {
    startOnLoad: true,
    userSpeakingThreshold: 0.6,
};
exports.defaultReactRealTimeVADOptions = {
    ...vad_web_1.defaultRealTimeVADOptions,
    ...defaultReactOptions,
};
const reactOptionKeys = Object.keys(defaultReactOptions);
const vadOptionKeys = Object.keys(vad_web_1.defaultRealTimeVADOptions);
const _filter = (keys, obj) => {
    return keys.reduce((acc, key) => {
        acc[key] = obj[key];
        return acc;
    }, {});
};
function useOptions(options) {
    options = { ...exports.defaultReactRealTimeVADOptions, ...options };
    const reactOptions = _filter(reactOptionKeys, options);
    const vadOptions = _filter(vadOptionKeys, options);
    return [reactOptions, vadOptions];
}
function useMicVAD(options) {
    const [reactOptions, vadOptions] = useOptions(options);
    const [userSpeaking, updateUserSpeaking] = (0, react_1.useReducer)((state, isSpeechProbability) => isSpeechProbability > reactOptions.userSpeakingThreshold, false);
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [errored, setErrored] = (0, react_1.useState)(false);
    const [listening, setListening] = (0, react_1.useState)(false);
    const [vad, setVAD] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        ;
        (async () => {
            const userOnFrameProcessed = vadOptions.onFrameProcessed;
            vadOptions.onFrameProcessed = (probs) => {
                updateUserSpeaking(probs.isSpeech);
                userOnFrameProcessed(probs);
            };
            let myvad;
            try {
                myvad = await vad_web_1.MicVAD.new(vadOptions);
            }
            catch (e) {
                setLoading(false);
                if (e instanceof Error) {
                    setErrored({ message: e.message });
                }
                else {
                    // @ts-ignore
                    setErrored({ message: e });
                }
                return;
            }
            setVAD(myvad);
            setLoading(false);
            if (reactOptions.startOnLoad) {
                myvad?.start();
                setListening(true);
            }
        })();
        return function cleanUp() {
            if (!loading && !errored) {
                vad?.pause();
                setListening(false);
            }
        };
    }, []);
    const pause = () => {
        if (!loading && !errored) {
            vad?.pause();
            setListening(false);
        }
    };
    const start = () => {
        if (!loading && !errored) {
            vad?.start();
            setListening(true);
        }
    };
    const toggle = () => {
        if (listening) {
            pause();
        }
        else {
            start();
        }
    };
    return {
        listening,
        errored,
        loading,
        userSpeaking,
        pause,
        start,
        toggle,
    };
}
exports.useMicVAD = useMicVAD;
var vad_web_2 = require("@ricky0123/vad-web");
Object.defineProperty(exports, "utils", { enumerable: true, get: function () { return vad_web_2.utils; } });
//# sourceMappingURL=index.js.map